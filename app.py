from flask import Flask, render_template, request
import numpy as np
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
import os

from feature_advice import feature_advice  # Load m√¥ t·∫£

app = Flask(__name__)

feature_names = ['Age', 'Number of sexual partners', 'First sexual intercourse',
    'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',
    'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',
    'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',
    'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',
    'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',
    'STDs:pelvic inflammatory disease', 'STDs:genital herpes',
    'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',
    'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',
    'STDs: Time since first diagnosis', 'STDs: Time since last diagnosis',
    'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Dx', 'Hinselmann', 'Schiller', 'Citology']
label_mapping = {
    "Age": "Tu·ªïi",
    "Number of sexual partners": "S·ªë b·∫°n t√¨nh",
    "First sexual intercourse": "Tu·ªïi quan h·ªá l·∫ßn ƒë·∫ßu",
    "Num of pregnancies": "S·ªë l·∫ßn mang thai",
    "Smokes": "H√∫t thu·ªëc",
    "Smokes (years)": "S·ªë nƒÉm h√∫t thu·ªëc",
    "Smokes (packs/year)": "S·ªë g√≥i m·ªói nƒÉm",
    "Hormonal Contraceptives": "D√πng thu·ªëc tr√°nh thai",
    "Hormonal Contraceptives (years)": "S·ªë nƒÉm d√πng thu·ªëc tr√°nh thai",
    "IUD": "ƒê·∫∑t v√≤ng",
    "IUD (years)": "S·ªë nƒÉm ƒë·∫∑t v√≤ng",
    "STDs": "T·ª´ng m·∫Øc STDs",
    "STDs (number)": "S·ªë l·∫ßn m·∫Øc STDs",
    "STDs:condylomatosis": "S√πi m√†o g√†",
    "STDs:cervical condylomatosis": "S√πi m√†o g√† c·ªï t·ª≠ cung",
    "STDs:vaginal condylomatosis": "S√πi m√†o g√† √¢m ƒë·∫°o",
    "STDs:vulvo-perineal condylomatosis": "S√πi m√†o g√† √¢m h·ªô - t·∫ßng sinh m√¥n",
    "STDs:syphilis": "B·ªánh giang mai",
    "STDs:pelvic inflammatory disease": "Vi√™m v√πng ch·∫≠u",
    "STDs:genital herpes": "M·ª•n r·ªôp sinh d·ª•c",
    "STDs:molluscum contagiosum": "U m·ªÅm l√¢y",
    "STDs:AIDS": "AIDS",
    "STDs:HIV": "HIV",
    "STDs:Hepatitis B": "Vi√™m gan B",
    "STDs:HPV": "Nhi·ªÖm HPV",
    "STDs: Number of diagnosis": "S·ªë l·∫ßn ƒë∆∞·ª£c ch·∫©n ƒëo√°n STDs",
    "STDs: Time since first diagnosis": "Th·ªùi gian t·ª´ l·∫ßn ch·∫©n ƒëo√°n STDs ƒë·∫ßu ti√™n",
    "STDs: Time since last diagnosis": "Th·ªùi gian t·ª´ l·∫ßn ch·∫©n ƒëo√°n STDs g·∫ßn nh·∫•t",
    "Dx:Cancer": "Ch·∫©n ƒëo√°n ung th∆∞",
    "Dx:CIN": "Ch·∫©n ƒëo√°n CIN",
    "Dx:HPV": "Ch·∫©n ƒëo√°n HPV",
    "Dx": "Ch·∫©n ƒëo√°n b·∫•t th∆∞·ªùng",
    "Hinselmann": "Hinselmann d∆∞∆°ng t√≠nh",
    "Schiller": "Schiller d∆∞∆°ng t√≠nh",
    "Citology": "T·∫ø b√†o h·ªçc d∆∞∆°ng t√≠nh",
    "Biopsy": "Sinh thi·∫øt d∆∞∆°ng t√≠nh"
}


model = joblib.load("logistic_model.pkl")
X_background = shap.maskers.Independent(pd.DataFrame([[0]*len(feature_names)], columns=feature_names))
explainer = shap.LinearExplainer(model, masker=X_background, feature_names=feature_names)


def generate_advice_auto(name, value, shap_val, percent):
    trend = "tƒÉng nguy c∆°" if shap_val > 0 else "gi·∫£m nguy c∆°"
    vi_name = label_mapping.get(name, name)
    line = f"‚Ä¢ {vi_name} = {value} ‚Üí {trend} ({shap_val:+.2f}, ·∫£nh h∆∞·ªüng: {percent:.1f}%)\n"


    if name in feature_advice:
        desc = feature_advice[name]["desc"]
        action = feature_advice[name]["action"]
    else:
        desc = f"Y·∫øu t·ªë n√†y ·∫£nh h∆∞·ªüng {trend} ƒë·∫øn nguy c∆° m·∫Øc b·ªánh."
        action = "N√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© n·∫øu b·∫°n ch∆∞a r√µ v·ªÅ y·∫øu t·ªë n√†y."

    return f"{line}  {desc}\n  üëâ {action}\n"

@app.route("/",methods=["GET", "POST"])
def index():
    if request.method == "POST":
        try:
            values = [float(request.form[f]) for f in feature_names]
            X_input = pd.DataFrame([values], columns=feature_names)

            prediction = model.predict(X_input)[0]
            proba = model.predict_proba(X_input)[0][1] * 100

            # SHAP
            shap_values = explainer(X_input)
            shap_score = shap_values.values[0]
            total_abs = sum(abs(val) for val in shap_score)
            impacts = [
                (feature_names[i], shap_score[i], abs(shap_score[i]) / total_abs * 100)
                for i in range(len(feature_names))
            ]

            advice = ""
            filtered = [x for x in impacts if x[2] >= 5]
            if prediction == 1:
                if filtered:
                    advice += "üß† C√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn d·ª± ƒëo√°n:\n\n"
                    for name, shap_val, percent in filtered:
                        idx = feature_names.index(name)
                        val = values[idx]
                        advice += generate_advice_auto(name, val, shap_val, percent)
                else:
                    advice = "‚ö†Ô∏è Nguy c∆° cao nh∆∞ng kh√¥ng c√≥ y·∫øu t·ªë n√†o v∆∞·ª£t ng∆∞·ª°ng 10% ·∫£nh h∆∞·ªüng."
            else:
                advice = (
                    "‚úÖ B·∫°n hi·ªán kh√¥ng c√≥ nguy c∆° ƒë√°ng k·ªÉ.\n\n"
                    "üí° Tuy nhi√™n, h√£y:\n"
                    "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
                    "‚Ä¢ Kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥ (√≠t nh·∫•t m·ªói 6‚Äì12 th√°ng)\n"
                    "‚Ä¢ Tr√°nh h√∫t thu·ªëc, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
                    "‚Ä¢ N·∫øu ch∆∞a ti√™m vaccine HPV, n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v·ªÅ vi·ªác ti√™m ph√≤ng\n"
                    "\nCh√∫c b·∫°n lu√¥n kh·ªèe m·∫°nh ‚ù§Ô∏è"
                )

           
            # L∆∞u bi·ªÉu ƒë·ªì waterfall SHAP
            plt.figure()
            shap.plots.waterfall(shap_values[0], show=False)
            plt.savefig("static/shap_plot.png", bbox_inches='tight')
            plt.close()

            return render_template("index.html", features=feature_names,
                                   result=prediction, proba=round(proba, 2),
                                   advice=advice)
        except Exception as e:
            return f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}"
    return render_template("index.html", features=feature_names, result=None)
if __name__ == "__main__":
    app.run(debug=True)